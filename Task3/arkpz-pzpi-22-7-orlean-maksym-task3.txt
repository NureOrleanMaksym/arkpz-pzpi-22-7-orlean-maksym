Міністерство освіти і науки України Харківський національний університет радіоелектроніки

Кафедра програмної інженерії

Звіт
З лабораторної роботи №3
З дисципліни «Аналіз та рефакторинг коду»
на тему: «РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ »

Виконавець:
ст. гр. ПЗПІ-22-7	Орлеан М. Е.

Перевірив:
ст. викладач кафедри ПІ	Сокорчук І. П.

















Харків 2024
 
1	МЕТА РОБОТИ

Метою роботи є розробка бізнес-логіки та функцій адміністрування для серверної частини програмної системи.

2	ХІД РОБОТИ

У ході виконання лабораторної роботи було реалізовано низку функцій, що охоплюють основні аспекти адміністрування користувачів, реєстрації та авторизації, а також управління сесіями. Опис інженерних рішень включає:
Управління користувачами:
•	Реєстрація користувачів: Користувач може зареєструватися за допомогою електронної пошти та пароля. Реалізована перевірка даних під час реєстрації.
•	Авторизація користувачів: Користувач може увійти в систему, використовуючи свою електронну пошту та пароль. Після успішної авторизації генерується токен для доступу до захищених ресурсів.
•	Оновлення даних користувачів: Адміністратор може змінювати дані користувача, такі як електронна пошта або пароль.
•	Видалення користувачів: Адміністратор може видаляти користувачів із системи за їхнім унікальним ідентифікатором (ID).
•	Отримання списку всіх користувачів: Тільки адміністратор може отримати повний список користувачів.
Управління сесіями:
•	Авторизація та аутентифікація: Користувачі можуть входити та виходити з системи через API, використовуючи механізм токенів (JWT). Токени генеруються при авторизації та перевіряються при кожному запиті.
•	Оновлення та перевірка токенів: Для продовження сесії користувача використовується механізм оновлення токенів.
Адміністрування даними:
У системі також реалізовані маршрути для адміністрування даних, що стосуються транспортних засобів, маршрутів та даних про трафік. Для кожного з цих напрямків створено маршрути, які можуть бути доступні лише адміністраторами:
•	Транспортні засоби: Адміністратор може додавати нові транспортні засоби, отримувати список всіх транспортних засобів, оновлювати інформацію або видаляти транспортні засоби.
•	Маршрути: Адміністратор має можливість створювати нові маршрути, переглядати всі маршрути, оновлювати або видаляти їх.
•	Дані про трафік: Адміністратор може додавати нові дані про трафік та переглядати існуючі дані.
Фрагменти програмного коду:
Функції роботи з користувачами:
1.router.post("/registration",body("email").isEmail(),body("password").isLength({ min: 3, max: 32 }), userController.registration); 
2. router.post("/login", userController.login); 
3. router.post("/logout", userController.logout); 
4. router.get("/users", authMiddleware, userController.getUsers); 
5. Functions for session handling:
6. async login(req, res, next) { }
7. async logout(req, res, next) { }
8. async refresh(req, res, next) { }
Функції для адміністрування даних:
1.	Транспортні засоби:
1. router.post("/", TransportController.createTransport); 
2. router.get("/", TransportController.getAllTransports); 
3. router.put("/:id", TransportController.updateTransport); 
4. router.delete("/:id", TransportController.deleteTransport); 
2.	Маршрути:
1. router.post("/", RouteController.createRoute); 
2. router.get("/", RouteController.getAllRoutes); 
3. router.put("/:id", RouteController.updateRoute); 
4. router.delete("/:id", RouteController.deleteRoute); 
3.	Дані про трафік:
1. router.post("/", TrafficDataController.createTrafficData); 
2. router.get("/", TrafficDataController.getAllTrafficData); 
Загальний висновок:
У результаті виконання роботи було розроблено серверну частину програмної системи, що включає функціонал для реєстрації, авторизації та управління сесіями користувачів. Реалізовані функції забезпечують ефективне керування користувачами через API, застосовуючи сучасні підходи до розробки на платформі Node.js з використанням MongoDB. Завдяки реалізованому API, користувачі можуть безпечно реєструватися, авторизовуватися та керувати своїми сесіями.
Для адміністраторів системи реалізовані можливості для управління не тільки користувачами, але й такими важливими аспектами, як транспортні засоби, маршрути та дані про трафік. Адміністратор може отримувати, створювати, оновлювати або видаляти дані у цих категоріях, що дозволяє ефективно управляти транспортною інфраструктурою в системі.

3	ВИСНОВКИ

Під час виконання лабораторної роботи було реалізовано кілька функцій, що охоплюють основні аспекти адміністрування, управління користувачами, транспортними засобами та маршрутами. Зокрема, були розроблені рішення, які забезпечують ефективне адміністрування цих компонентів системи, що підвищує її функціональність і зручність використання.
Управління користувачами було реалізовано через можливість реєстрації, авторизації та отримання списку всіх користувачів системи. Адміністратор має змогу видаляти користувачів за їх унікальним ідентифікатором (ID), що дозволяє ефективно контролювати доступ до системи та підтримувати її безпеку.
Управління транспортними засобами включає можливість додавання нових транспортних засобів, оновлення їхніх даних, перегляду списку всіх доступних транспортних засобів та їх видалення. Це дозволяє централізовано керувати інформацією про транспортні засоби, забезпечуючи зручне адміністрування та оптимізацію ресурсів системи.
Управління маршрутами дає змогу створювати нові маршрути, переглядати існуючі та видаляти їх за унікальним ідентифікатором. Це покращує процес логістики та дозволяє легко коригувати маршрути в системі для ефективного управління рухом.
Реалізація цих функцій підтверджує доцільність використання сучасних технологій для розробки серверних систем, таких як Node.js та MongoDB. Вони забезпечують високий рівень масштабованості, надійності та безпеки програмного забезпечення, а також значно підвищують зручність адміністрування і керування даними в системі.

 
ДОДАТОК А

UML діаграма отримання всіх користувачів

 
Рисунок А.1 – UML отримання всіх користувачів

Діаграма зображує процес отримання списку користувачів, починаючи з запиту клієнта і завершуючи поверненням результату з бази даних.
 
ДОДАТОК Б

UML діаграми активності


 
Рисунок Б.1 – UML діаграма активності отримання всіх користувачів.

Діаграма на рис. Б.1 показує процес отримання всіх користувачів в системі.
 
Рисунок Б.2 – UML Діаграма активності для реєстрації користувача. 
Діаграма на рис. Б.2 описує процес реєстрації користувача в системі.
 

Рисунок Б.3 – UML Діаграма активності для входу користувача.

Діаграма на рис. Б.3 демонструє логіку входу користувача у систему.

 

Рисунок Б.4 – UML Діаграма активності для отримання всіх користувачів. 
Діаграма на рис. Б.4 показує процес отримання всіх користувачів.
 

Рисунок Б.5 – UML Діаграма активності для видалення користувача

Діаграма на рис. Б.5 ілюструє процес видалення користувача.

 
Рисунок Б.6 – UML Діаграма активності для додавання транспортного засобу

Діаграма на рис. Б.6 Діаграма активності для додавання транспортного засобу описує процес валідації даних транспортного засобу, його додавання до бази даних та підтвердження успішного додавання.

ДОДАТОК В
Код з програмної реалізації маршрутів для транспортних засобів (із серверної частини)

1. const Router = require("express").Router;
2. const { body } = require("express-validator");
3. const userController = require("../controllers/user-controller");
4. const authMiddleware = require("../middlewares/auth-middleware");
5. const adminRouter = require("./admin-routes");
6. const routeRouter = require("./route-routes");
7. const trafficDataRouter = require("./trafficData-routes");
8. const transportRouter = require("./transport-routes");
9. const router = new Router();
10. router.post("/registration", body("email").isEmail(), body("password").isLength({ min: 3, max: 32 }), userController.registration);
11. router.post("/login", userController.login);
12. router.post("/logout", userController.logout);
13. router.get("/refresh", userController.refresh);
14. router.get("/users", authMiddleware, userController.getUsers);
15. router.use("/admin", adminRouter);
16. router.use("/transports", transportRouter);
17. router.use("/routes", routeRouter);
18. router.use("/traffic-data", trafficDataRouter);
19. module.exports = router; 
20. const userController = require("../controllers/user-controller");
21. const transportController = require("../controllers/transport-controller");
22. const routeController = require("../controllers/route-controller");
23. const trafficDataController = require("../controllers/trafficData-controller");
24. const adminMiddleware = require("../middlewares/admin-middleware");
25. const router = new Router();
26. router.get("/users", adminMiddleware, userController.getUsers);
27. router.post("/transports", adminMiddleware, transportController.createTransport);
28. router.get("/transports", adminMiddleware, transportController.getAllTransports);
29. router.put("/transports/:id", adminMiddleware, transportController.updateTransport);
30. router.delete("/transports/:id", adminMiddleware, transportController.deleteTransport);
31. router.post("/routes", adminMiddleware, routeController.createRoute);
32. router.get("/routes", adminMiddleware, routeController.getAllRoutes);
33. router.put("/routes/:id", adminMiddleware, routeController.updateRoute);
34. router.delete("/routes/:id", adminMiddleware, routeController.deleteRoute);
35. router.post("/traffic-data", adminMiddleware, trafficDataController.createTrafficData);
36. router.get("/traffic-data", adminMiddleware, trafficDataController.getAllTrafficData);
37. module.exports = router;

