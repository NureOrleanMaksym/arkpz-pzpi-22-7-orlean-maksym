Міністерство освіти і науки України Харківський національний університет радіоелектроніки

Кафедра програмної інженерії

Звіт
З лабораторної роботи №5
З дисципліни «Аналіз та рефакторинг коду»
на тему: «РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ»

Виконавець:
ст. гр. ПЗПІ-22-7	Орлеан М. Е.

Перевірив:
ст. викладач кафедри ПІ	Сокорчук І. П.



















Харків 2024
 
1	Мета роботи:

Розгорнути реалізовану програмну систему, перевірити та налаштувати роботу розгорнутої програмної системи.

2	Хід роботи:

2.1	Опис розгорнутої програмної системи

Серверна частина: • Мова програмування: Серверна частина розроблена на мові JavaScript. • Фреймворк: Для ефективної розробки веб-додатків і API використовується Node.js разом із Express.js. Цей стек технологій забезпечує високу ефективність обміну даними, що необхідно для моніторингу стану IoT-пристроїв. • База даних: Для зберігання і управління даними, такими як температура, вологість, освітленість та показники акселерометра, використовується MongoDB. Для роботи з базою даних застосовується бібліотека Mongoose, що забезпечує зручне взаємодія з MongoDB. • Контролери та маршрутизація: Для обробки HTTP-запитів реалізовані контролери, що забезпечують маршрутизацію запитів та взаємодію з основними ресурсами системи, зокрема методами GET, POST, PUT і DELETE. • Міграції та оновлення: Для ініціалізації бази даних і додавання початкових даних використовуються скрипти міграцій, що автоматизують процес налаштування бази.
Функціональність: Система здійснює збір, обробку та аналіз даних з IoT-пристроїв, таких як температура, вологість, освітленість і дані з акселерометра. Додатково передбачена можливість відправлення цих даних через MQTT-брокер для подальшої обробки іншими системами.
Інтеграція з IoT: Система інтегрована з IoT-пристроями через MQTT-брокер, що дозволяє отримувати дані з сенсорів у реальному часі та здійснювати їх обробку на сервері. Для комунікації між IoT-пристроєм та сервером використовується MQTT-протокол, що забезпечує стабільний та ефективний обмін даними.

2.2	Опис розгортання

Серверна частина:
1.	Інсталяція залежностей: Усі необхідні бібліотеки та залежності були встановлені через команду npm install.
2.	Налаштування середовища: У файлі .env були налаштовані змінні середовища, включаючи підключення до MQTT-сервера для обміну даними з IoT-пристроями.
3.	Запуск сервера: Сервер було запущено за допомогою команди npm start. Для перевірки працездатності серверу використовувалися запити до API через Postman.
4.	Перевірка функціональності: • Запити до API обробляються без помилок.
• Дані успішно зберігаються в базі даних для подальшого аналізу та обробки.
• Система коректно передає та отримує дані через MQTT з IoT-пристроїв (ESP32).
Інтеграція IoT:
1.	Підключення ESP32 до Wi-Fi та налаштування передачі даних на сервер: Мікроконтролер ESP32 був налаштований для підключення до Wi-Fi та передачі даних з сенсорів на сервер через MQTT-протокол.
2.	Передача зібраних даних через MQTT до сервера: Дані, отримані від сенсорів (температури, вологості, освітленості та акселерометра), передаються через MQTT на сервер для подальшої обробки.
3.	Обробка та зберігання даних: Сервер обробляє отримані дані та зберігає їх у базі даних MongoDB для подальшого аналізу та виведення на фронтенд.
Використані інструменти та технології:
• Node.js: Використовувався для розробки серверної частини і обробки запитів API.
• MongoDB: Використовувалася для зберігання та управління даними, отриманими від IoT-пристроїв.
• Postman: Інструмент для тестування API запитів.
• MQTT: Протокол, який використовується для з'єднання IoT-пристроїв (ESP32) з сервером для передачі даних.
• Visual Studio Code: Інтегроване середовище для розробки та налагодження коду серверної частини.
• GitHub: Використовувався для керування версіями коду та співпраці над проектом.

3	Висновок:

Програмну систему успішно розгорнуто та протестовано в локальному середовищі, всі її компоненти працюють стабільно та без помилок. Основні функціональні можливості системи включають:
 • Обробку даних від IoT пристроїв.
• Генерацію та своєчасну відправку нагадувань користувачам.
• Зберігання даних у базі даних MongoDB, що гарантує їх доступність для подальшого аналізу.
У майбутньому планується розгортання системи на хмарному сервері, що забезпечить більшу масштабованість та покращену доступність.
