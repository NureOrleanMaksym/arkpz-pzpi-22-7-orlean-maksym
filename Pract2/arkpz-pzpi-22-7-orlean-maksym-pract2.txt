Міністерство освіти та науки України
Харківський національний університет радіоелектроніки
 
Кафедра ПІ
 
 
ЗВІТ З ПРАКТИЧНОЇ РОБОТИ №2
 
з дисципліни “Аналіз та рефакторинг коду” 
за темою: «Методи рефакторингу коду програмного забезпечення»
  
Виконав                                                                                  Перевірив:
ст. гр. ПЗПІ-22-7                                                        	    Сокорчук І. П. 
Орлеан М.Е.




Харків 2024

1.	Мета заняття:
Навчитися основним методам рефакторингу коду на основі реальних прикладів з власних програмних проєктів. Навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.

2.	Завдання:
Обрати три методи рефакторингу коду із книги Мартіна Фаулера «Refactoring. Improving the Design of Existing Code».
Навести приклади свого особистого коду, який потребує покращення, та продемонструвати застосування обраних методів.
Кожен метод рефакторингу повинен супроводжуватись:
•	Описом проблеми, яку вирішує даний метод.
•	Кодом до і після застосування методу рефакторингу.
•	Поясненням переваг використаного методу.

3.	Хід роботи: 
Було обрано три методи рефакторингу коду із книги Мартіна Фаулера «Refactoring. Improving the Design of Existing Code»: 
•	Extract Method
•	Rename Method
•	Simplify Conditional Expression

Презентацію наведено у додатку Б







4.	Висновки: 
Застосування методів рефакторингу сприяє створенню якісного, чистого та підтримуваного коду. Опанувавши такі методи, ми можемо ідентифікувати проблеми в структурі програм, підвищувати ефективність своїх розробок і зменшувати ризик помилок у майбутніх проєктах. Ці навички забезпечують впевненість у роботі над великими кодовими базами та покращують комунікацію у командній розробці.
























ДОДАТОК Б
Посилання на відео: Презентація на тему " Методи рефакторингу коду програмного забезпечення": https://youtu.be/ud67izIn_ZE

Методи рефакторингу коду програмного забезпечення
Виконав:ст.гр.ПЗПІ-22-7 Орлеан Максим


Рефакторинг - процес покращення якості коду без зміни його функціональності.

Мета презентації:
Розглянути три популярні методи рефакторингу.
Продемонструвати застосування методів на прикладах.
Показати переваги рефакторингу для читабельності та підтримки коду.

Обрані методи:
Extract Method
Rename Method
Simplify Conditional Expression



Extract Method
Опис проблеми:
Код містить довгий метод, який виконує декілька завдань одночасно.
Проблеми:
Складність читання та розуміння коду.
Ускладнене тестування окремих частин методу.



Extract Method: Виділення частин коду в окремі методи для спрощення основного методу.

Переваги:
Покращена читабельність.
Кожен метод виконує одну конкретну задачу.
Полегшення тестування.



Rename Method
Опис проблеми:
Назви методів або змінних не відображають їхні функції.
Проблеми:  
Зниження зрозумілості коду.
Помилки при співпраці розробників.



Rename Method: Зміна назви методу на таку, що відображає його призначення.

Переваги:
Зрозумілий код, навіть без додаткових коментарів.
Полегшення співпраці між розробниками.



Simplify Conditional Expression
Опис проблеми:
Код містить складні умовні вирази.
Проблеми:
Зниження читабельності.
Підвищення ймовірності помилок.



Simplify Conditional Expression: Створення допоміжних методів або змінних для спрощення умов.

Переваги:
Логіка умов винесена в окремий метод.
Покращена читабельність та легкість змін.




Висновок:
Застосування методів рефакторингу сприяє створенню якісного, чистого та підтримуваного коду. Опанувавши такі методи, ми можемо ідентифікувати проблеми в структурі програм, підвищувати ефективність своїх розробок і зменшувати ризик помилок у майбутніх проєктах. Ці навички забезпечують впевненість у роботі над великими кодовими базами та покращують комунікацію у командній розробці.




